-When would you want to use a remote repository rather than keeping all your work local?

When you are collaborating with others.  Or to act a a store house for official version while local version could be working on a updated version (publishing).

-Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You may not want other users or collaborators to see/use code that is still under development.  It could have bugs in it that you are still working out.

useful commands:

git push (name of remote repository) (local branch name to push)  - This will push the local branch you specify to GitHub
git pull (name of remote repository) (remote branch name to pull) - This will pull down the remote branch you specify locally.

-Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches are a sequential list of commits which can be local or remote.  
Clones are a copy of repository (one or more branches).
Forks are a GitHub to GitHub clone.

useful commands:

git clone https://github.com/codem0nkey/recipes - how to clone a repository from a GitHub link to my laptop (note: all files are created based on current git bash folder location)
git remote -v   -  This will show you all currently setup remote repositories you can push or pull to/from.

-What is the benefit of having a copy of the last known state of the remote stored locally?

It allows me to know if I am ahead or behind in commits between local and github.

useful commands:

git fetch
git merge origin master

These two commands can be the same as:

git pull

A fast-forward merge is a merge where commit B has A as an ancestor.

-How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

It would be more difficult to collaborate with GitHub.  Basic Version control could help if you came up with a numeric system, but
identifying the changes and merging those changes would still be a challenge.


-When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Creating a separate branch can be useful when trying out a new feature but you want to keep the main "master branch" development also ongoing.
Making changes only in the master branch is also good for working up to workable code.  Branches allow for mutliple users to collaborate in different ways.


Article on dealing with detached head:

http://stackoverflow.com/questions/5772192/how-can-i-reconcile-detached-head-with-master-origin





